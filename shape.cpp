#include "shape.h"

// PRIVATE

// type; rotation; horiz. squares; vert. squares
int shapes[6][4][5][5] = 
{
    // I
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {1, 2, 3, 4, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 1, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 4, 3, 2, 1},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 1, 0, 0}
        }
    },
    // S
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 2, 1, 0},
            {0, 4, 3, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 3, 2, 0},
            {0, 0, 0, 1, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 3, 4, 0},
            {0, 1, 2, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0},
            {0, 2, 3, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // S-inverted
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 4, 3, 0, 0},
            {0, 0, 2, 1, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 2, 3, 0, 0},
            {0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 1, 2, 0, 0},
            {0, 0, 3, 4, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 1, 0},
            {0, 0, 3, 2, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // L
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 1, 0},
            {0, 4, 3, 2, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 2, 1, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 2, 3, 4, 0},
            {0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 1, 2, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // L-inverted
    {
        {
            {0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0},
            {0, 2, 3, 4, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 2, 1, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 4, 3, 2, 0},
            {0, 0, 0, 1, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 1, 2, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // T
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 4, 3, 1, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 3, 2, 0},
            {0, 0, 1, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 1, 3, 4, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 0, 0, 0}
        }, 
        {
            {0, 0, 0, 0, 0},
            {0, 0, 1, 0, 0},
            {0, 2, 3, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }
    }
};

// types; rotation; position (x-min, x-max, init y)
int shapesPosLimits[6][4][3] =
{
    // I
    {
        {0, 6, 17}, 
        {-2, 7, 16}, 
        {0, 5, 17}, 
        {-2, 7, 15}
    }, 
    // S
    {
        {-1, 6, 17}, 
        {-2, 6, 16}, 
        {-1, 6, 16}, 
        {-2, 7, 16}
    }, 
    // S-inverted
    {
        {-1, 6, 16}, 
        {-1, 7, 16}, 
        {-1, 6, 17}, 
        {-1, 7, 16}
    }, 
    // L
    {
        {-1, 6, 17}, 
        {-2, 6, 16}, 
        {-1, 6, 16}, 
        {-1, 7, 16}
    }, 
    // L-inverted
    {
        {-1, 6, 17}, 
        {-2, 6, 16}, 
        {-1, 6, 16}, 
        {-1, 7, 16}
    }, 
    // T
    {
        {-1, 6, 17}, 
        {-2, 6, 16}, 
        {-1, 6, 16}, 
        {-1, 7, 16}
    }
};

// PUBLIC

int Shape::getShape(int type, int rotation, int x, int y)
{
    // get current shape's attributes
    return shapes[type][rotation][x][y];
}

int Shape::getXMinPos(int type, int rotation)
{
    // get the minimum x position for the given shape
    return shapesPosLimits[type][rotation][0];
}

int Shape::getXMaxPos(int type, int rotation)
{
    // get the maximum x position for the given shape
    return shapesPosLimits[type][rotation][1];
}

int Shape::getYInitPos(int type, int rotation)
{
    // get the initial y position for the given shape
    return shapesPosLimits[type][rotation][2];
}